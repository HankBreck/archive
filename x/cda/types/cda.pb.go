// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archive/cda/cda.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// the state of the CDA
// pending - waiting approval by signing parties
// finalized - all signatures present
// voided - inactive
type CDA_ContractStatus int32

const (
	CDA_Pending   CDA_ContractStatus = 0
	CDA_Finalized CDA_ContractStatus = 1
	CDA_Voided    CDA_ContractStatus = 2
)

var CDA_ContractStatus_name = map[int32]string{
	0: "Pending",
	1: "Finalized",
	2: "Voided",
}

var CDA_ContractStatus_value = map[string]int32{
	"Pending":   0,
	"Finalized": 1,
	"Voided":    2,
}

func (x CDA_ContractStatus) String() string {
	return proto.EnumName(CDA_ContractStatus_name, int32(x))
}

func (CDA_ContractStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_bff7eabe2aabbd43, []int{0, 0}
}

type CDA struct {
	// the account that sent the message
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// the ID of the CDA
	Id uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// the list of identity IDs that must sign the CDA
	SignerIdentities []uint64 `protobuf:"varint,3,rep,packed,name=signer_identities,json=signerIdentities,proto3" json:"signer_identities,omitempty"`
	// the id of the registered contract template
	ContractId uint64 `protobuf:"varint,4,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	// the URI pointing to the contract's metadata
	LegalMetadataUri string `protobuf:"bytes,5,opt,name=legal_metadata_uri,json=legalMetadataUri,proto3" json:"legal_metadata_uri,omitempty"`
	// the expiration UTC timestamp of this agreement
	UtcExpireTime time.Time `protobuf:"bytes,6,opt,name=utc_expire_time,json=utcExpireTime,proto3,stdtime" json:"utc_expire_time"`
	// the current status of the CDA
	Status CDA_ContractStatus `protobuf:"varint,7,opt,name=status,proto3,enum=archive.cda.CDA_ContractStatus" json:"status,omitempty"`
	// the address of the witness smart contract
	WitnessAddress string `protobuf:"bytes,8,opt,name=witness_address,json=witnessAddress,proto3" json:"witness_address,omitempty"`
}

func (m *CDA) Reset()         { *m = CDA{} }
func (m *CDA) String() string { return proto.CompactTextString(m) }
func (*CDA) ProtoMessage()    {}
func (*CDA) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff7eabe2aabbd43, []int{0}
}
func (m *CDA) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CDA) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CDA.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CDA) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CDA.Merge(m, src)
}
func (m *CDA) XXX_Size() int {
	return m.Size()
}
func (m *CDA) XXX_DiscardUnknown() {
	xxx_messageInfo_CDA.DiscardUnknown(m)
}

var xxx_messageInfo_CDA proto.InternalMessageInfo

func (m *CDA) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *CDA) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CDA) GetSignerIdentities() []uint64 {
	if m != nil {
		return m.SignerIdentities
	}
	return nil
}

func (m *CDA) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *CDA) GetLegalMetadataUri() string {
	if m != nil {
		return m.LegalMetadataUri
	}
	return ""
}

func (m *CDA) GetUtcExpireTime() time.Time {
	if m != nil {
		return m.UtcExpireTime
	}
	return time.Time{}
}

func (m *CDA) GetStatus() CDA_ContractStatus {
	if m != nil {
		return m.Status
	}
	return CDA_Pending
}

func (m *CDA) GetWitnessAddress() string {
	if m != nil {
		return m.WitnessAddress
	}
	return ""
}

type SigningDataExtension struct {
	SigningData RawSigningData `protobuf:"bytes,1,opt,name=signing_data,json=signingData,proto3,casttype=RawSigningData" json:"signing_data,omitempty"`
}

func (m *SigningDataExtension) Reset()         { *m = SigningDataExtension{} }
func (m *SigningDataExtension) String() string { return proto.CompactTextString(m) }
func (*SigningDataExtension) ProtoMessage()    {}
func (*SigningDataExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_bff7eabe2aabbd43, []int{1}
}
func (m *SigningDataExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SigningDataExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SigningDataExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SigningDataExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SigningDataExtension.Merge(m, src)
}
func (m *SigningDataExtension) XXX_Size() int {
	return m.Size()
}
func (m *SigningDataExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_SigningDataExtension.DiscardUnknown(m)
}

var xxx_messageInfo_SigningDataExtension proto.InternalMessageInfo

func (m *SigningDataExtension) GetSigningData() RawSigningData {
	if m != nil {
		return m.SigningData
	}
	return nil
}

func init() {
	proto.RegisterEnum("archive.cda.CDA_ContractStatus", CDA_ContractStatus_name, CDA_ContractStatus_value)
	proto.RegisterType((*CDA)(nil), "archive.cda.CDA")
	proto.RegisterType((*SigningDataExtension)(nil), "archive.cda.SigningDataExtension")
}

func init() { proto.RegisterFile("archive/cda/cda.proto", fileDescriptor_bff7eabe2aabbd43) }

var fileDescriptor_bff7eabe2aabbd43 = []byte{
	// 478 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x92, 0xcf, 0x6e, 0x13, 0x3d,
	0x14, 0xc5, 0xe3, 0x24, 0x5f, 0xd2, 0x3a, 0x6d, 0x9a, 0xcf, 0x2a, 0xd2, 0x28, 0x8b, 0x99, 0x28,
	0x1b, 0x46, 0x02, 0xcd, 0x48, 0x45, 0x08, 0xb6, 0xf9, 0x53, 0x44, 0x25, 0x2a, 0xa1, 0x29, 0xb0,
	0x60, 0x33, 0x72, 0x6c, 0xe3, 0x5e, 0x35, 0xb1, 0x23, 0xdb, 0x43, 0x03, 0x4f, 0xd1, 0x0d, 0xef,
	0xd4, 0x65, 0x97, 0xac, 0x0a, 0x4a, 0xde, 0x82, 0x15, 0x8a, 0x27, 0x03, 0x65, 0x31, 0xd2, 0xdc,
	0xdf, 0x39, 0xb6, 0xee, 0xb9, 0xbe, 0xf8, 0x11, 0x35, 0xec, 0x12, 0x3e, 0x8b, 0x94, 0x71, 0xba,
	0xfd, 0x92, 0xa5, 0xd1, 0x4e, 0x93, 0xce, 0x0e, 0x27, 0x8c, 0xd3, 0xfe, 0xb1, 0xd4, 0x52, 0x7b,
	0x9e, 0x6e, 0xff, 0x4a, 0x4b, 0x3f, 0x92, 0x5a, 0xcb, 0xb9, 0x48, 0x7d, 0x35, 0x2b, 0x3e, 0xa5,
	0x0e, 0x16, 0xc2, 0x3a, 0xba, 0x58, 0x96, 0x86, 0xe1, 0xb7, 0x06, 0x6e, 0x4c, 0xa6, 0x23, 0x12,
	0xe0, 0x36, 0x33, 0x82, 0x3a, 0x6d, 0x02, 0x34, 0x40, 0xf1, 0x7e, 0x56, 0x95, 0xa4, 0x8b, 0xeb,
	0xc0, 0x83, 0xfa, 0x00, 0xc5, 0xcd, 0xac, 0x0e, 0x9c, 0x3c, 0xc1, 0xff, 0x5b, 0x90, 0x4a, 0x98,
	0x1c, 0xb8, 0x50, 0x0e, 0x1c, 0x08, 0x1b, 0x34, 0x06, 0x8d, 0xb8, 0x99, 0xf5, 0x4a, 0xe1, 0xec,
	0x0f, 0x27, 0x11, 0xee, 0x30, 0xad, 0x9c, 0xa1, 0xcc, 0xe5, 0xc0, 0x83, 0xa6, 0xbf, 0x05, 0x57,
	0xe8, 0x8c, 0x93, 0xa7, 0x98, 0xcc, 0x85, 0xa4, 0xf3, 0x7c, 0x21, 0x1c, 0xe5, 0xd4, 0xd1, 0xbc,
	0x30, 0x10, 0xfc, 0xe7, 0x5b, 0xe8, 0x79, 0xe5, 0x7c, 0x27, 0xbc, 0x37, 0x40, 0xde, 0xe0, 0xa3,
	0xc2, 0xb1, 0x5c, 0xac, 0x96, 0x60, 0x44, 0xbe, 0xcd, 0x12, 0xb4, 0x06, 0x28, 0xee, 0x9c, 0xf4,
	0x93, 0x32, 0x68, 0x52, 0x05, 0x4d, 0xde, 0x55, 0x41, 0xc7, 0x7b, 0xb7, 0xf7, 0x51, 0xed, 0xe6,
	0x47, 0x84, 0xb2, 0xc3, 0xc2, 0xb1, 0x53, 0x7f, 0x76, 0xab, 0x92, 0x17, 0xb8, 0x65, 0x1d, 0x75,
	0x85, 0x0d, 0xda, 0x03, 0x14, 0x77, 0x4f, 0xa2, 0xe4, 0xc1, 0x40, 0x93, 0xc9, 0x74, 0x94, 0x4c,
	0x76, 0x8d, 0x5e, 0x78, 0x5b, 0xb6, 0xb3, 0x93, 0xc7, 0xf8, 0xe8, 0x1a, 0x9c, 0x12, 0xd6, 0xe6,
	0x94, 0x73, 0x23, 0xac, 0x0d, 0xf6, 0x7c, 0xc7, 0xdd, 0x1d, 0x1e, 0x95, 0x74, 0xf8, 0x12, 0x77,
	0xff, 0xbd, 0x82, 0x74, 0x70, 0xfb, 0xad, 0x50, 0x1c, 0x94, 0xec, 0xd5, 0xc8, 0x21, 0xde, 0x7f,
	0x05, 0x8a, 0xce, 0xe1, 0xab, 0xe0, 0x3d, 0x44, 0x30, 0x6e, 0x7d, 0xd0, 0xc0, 0x05, 0xef, 0xd5,
	0x87, 0xe7, 0xf8, 0xf8, 0x02, 0xa4, 0x02, 0x25, 0xa7, 0xd4, 0xd1, 0xd3, 0x95, 0x13, 0xca, 0x82,
	0x56, 0xe4, 0x39, 0x3e, 0xb0, 0x25, 0xcf, 0xb7, 0x43, 0xf1, 0x8f, 0x75, 0x30, 0x26, 0xbf, 0xee,
	0xa3, 0x6e, 0x46, 0xaf, 0x1f, 0x1c, 0xc9, 0x3a, 0xf6, 0x6f, 0x31, 0x1e, 0xdf, 0xae, 0x43, 0x74,
	0xb7, 0x0e, 0xd1, 0xcf, 0x75, 0x88, 0x6e, 0x36, 0x61, 0xed, 0x6e, 0x13, 0xd6, 0xbe, 0x6f, 0xc2,
	0xda, 0xc7, 0x58, 0x82, 0xbb, 0x2c, 0x66, 0x09, 0xd3, 0x8b, 0xf4, 0x35, 0x55, 0x57, 0x63, 0x23,
	0xd8, 0x55, 0x5a, 0x2d, 0xdc, 0xca, 0xaf, 0x9c, 0xfb, 0xb2, 0x14, 0x76, 0xd6, 0xf2, 0xb3, 0x7d,
	0xf6, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x2a, 0xb7, 0x45, 0x25, 0x8e, 0x02, 0x00, 0x00,
}

func (m *CDA) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CDA) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CDA) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.WitnessAddress) > 0 {
		i -= len(m.WitnessAddress)
		copy(dAtA[i:], m.WitnessAddress)
		i = encodeVarintCda(dAtA, i, uint64(len(m.WitnessAddress)))
		i--
		dAtA[i] = 0x42
	}
	if m.Status != 0 {
		i = encodeVarintCda(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x38
	}
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UtcExpireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UtcExpireTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCda(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.LegalMetadataUri) > 0 {
		i -= len(m.LegalMetadataUri)
		copy(dAtA[i:], m.LegalMetadataUri)
		i = encodeVarintCda(dAtA, i, uint64(len(m.LegalMetadataUri)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContractId != 0 {
		i = encodeVarintCda(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x20
	}
	if len(m.SignerIdentities) > 0 {
		dAtA3 := make([]byte, len(m.SignerIdentities)*10)
		var j2 int
		for _, num := range m.SignerIdentities {
			for num >= 1<<7 {
				dAtA3[j2] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j2++
			}
			dAtA3[j2] = uint8(num)
			j2++
		}
		i -= j2
		copy(dAtA[i:], dAtA3[:j2])
		i = encodeVarintCda(dAtA, i, uint64(j2))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintCda(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintCda(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SigningDataExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SigningDataExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SigningDataExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigningData) > 0 {
		i -= len(m.SigningData)
		copy(dAtA[i:], m.SigningData)
		i = encodeVarintCda(dAtA, i, uint64(len(m.SigningData)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCda(dAtA []byte, offset int, v uint64) int {
	offset -= sovCda(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CDA) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovCda(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovCda(uint64(m.Id))
	}
	if len(m.SignerIdentities) > 0 {
		l = 0
		for _, e := range m.SignerIdentities {
			l += sovCda(uint64(e))
		}
		n += 1 + sovCda(uint64(l)) + l
	}
	if m.ContractId != 0 {
		n += 1 + sovCda(uint64(m.ContractId))
	}
	l = len(m.LegalMetadataUri)
	if l > 0 {
		n += 1 + l + sovCda(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UtcExpireTime)
	n += 1 + l + sovCda(uint64(l))
	if m.Status != 0 {
		n += 1 + sovCda(uint64(m.Status))
	}
	l = len(m.WitnessAddress)
	if l > 0 {
		n += 1 + l + sovCda(uint64(l))
	}
	return n
}

func (m *SigningDataExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SigningData)
	if l > 0 {
		n += 1 + l + sovCda(uint64(l))
	}
	return n
}

func sovCda(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCda(x uint64) (n int) {
	return sovCda(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CDA) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCda
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CDA: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CDA: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCda
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCda
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.SignerIdentities = append(m.SignerIdentities, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCda
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthCda
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthCda
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.SignerIdentities) == 0 {
					m.SignerIdentities = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCda
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.SignerIdentities = append(m.SignerIdentities, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field SignerIdentities", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalMetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCda
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalMetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtcExpireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCda
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UtcExpireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= CDA_ContractStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WitnessAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCda
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WitnessAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCda(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCda
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SigningDataExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCda
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SigningDataExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SigningDataExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCda
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCda
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCda
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningData = append(m.SigningData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningData == nil {
				m.SigningData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCda(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCda
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCda(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCda
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCda
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCda
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCda
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCda
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCda
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCda        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCda          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCda = fmt.Errorf("proto: unexpected end of group")
)
