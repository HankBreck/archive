// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: archive/cda/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/gogo/protobuf/types"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgCreateCda struct {
	Creator          string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	SigningParties   []string       `protobuf:"bytes,2,rep,name=signing_parties,json=signingParties,proto3" json:"signing_parties,omitempty"`
	ContractId       uint64         `protobuf:"varint,3,opt,name=contract_id,json=contractId,proto3" json:"contract_id,omitempty"`
	LegalMetadataUri string         `protobuf:"bytes,4,opt,name=legal_metadata_uri,json=legalMetadataUri,proto3" json:"legal_metadata_uri,omitempty"`
	SigningData      RawSigningData `protobuf:"bytes,5,opt,name=signing_data,json=signingData,proto3,casttype=RawSigningData" json:"signing_data,omitempty"`
	UtcExpireTime    time.Time      `protobuf:"bytes,6,opt,name=utc_expire_time,json=utcExpireTime,proto3,stdtime" json:"utc_expire_time"`
}

func (m *MsgCreateCda) Reset()         { *m = MsgCreateCda{} }
func (m *MsgCreateCda) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCda) ProtoMessage()    {}
func (*MsgCreateCda) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{0}
}
func (m *MsgCreateCda) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCda) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCda.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCda) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCda.Merge(m, src)
}
func (m *MsgCreateCda) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCda) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCda.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCda proto.InternalMessageInfo

func (m *MsgCreateCda) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgCreateCda) GetSigningParties() []string {
	if m != nil {
		return m.SigningParties
	}
	return nil
}

func (m *MsgCreateCda) GetContractId() uint64 {
	if m != nil {
		return m.ContractId
	}
	return 0
}

func (m *MsgCreateCda) GetLegalMetadataUri() string {
	if m != nil {
		return m.LegalMetadataUri
	}
	return ""
}

func (m *MsgCreateCda) GetSigningData() RawSigningData {
	if m != nil {
		return m.SigningData
	}
	return nil
}

func (m *MsgCreateCda) GetUtcExpireTime() time.Time {
	if m != nil {
		return m.UtcExpireTime
	}
	return time.Time{}
}

type MsgCreateCdaResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgCreateCdaResponse) Reset()         { *m = MsgCreateCdaResponse{} }
func (m *MsgCreateCdaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCreateCdaResponse) ProtoMessage()    {}
func (*MsgCreateCdaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{1}
}
func (m *MsgCreateCdaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCreateCdaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCreateCdaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCreateCdaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCreateCdaResponse.Merge(m, src)
}
func (m *MsgCreateCdaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCreateCdaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCreateCdaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCreateCdaResponse proto.InternalMessageInfo

func (m *MsgCreateCdaResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type MsgApproveCda struct {
	Creator     string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CdaId       uint64         `protobuf:"varint,2,opt,name=cda_id,json=cdaId,proto3" json:"cda_id,omitempty"`
	SigningData RawSigningData `protobuf:"bytes,3,opt,name=signing_data,json=signingData,proto3,casttype=RawSigningData" json:"signing_data,omitempty"`
}

func (m *MsgApproveCda) Reset()         { *m = MsgApproveCda{} }
func (m *MsgApproveCda) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCda) ProtoMessage()    {}
func (*MsgApproveCda) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{2}
}
func (m *MsgApproveCda) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCda) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCda.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCda) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCda.Merge(m, src)
}
func (m *MsgApproveCda) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCda) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCda.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCda proto.InternalMessageInfo

func (m *MsgApproveCda) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgApproveCda) GetCdaId() uint64 {
	if m != nil {
		return m.CdaId
	}
	return 0
}

func (m *MsgApproveCda) GetSigningData() RawSigningData {
	if m != nil {
		return m.SigningData
	}
	return nil
}

type MsgApproveCdaResponse struct {
}

func (m *MsgApproveCdaResponse) Reset()         { *m = MsgApproveCdaResponse{} }
func (m *MsgApproveCdaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgApproveCdaResponse) ProtoMessage()    {}
func (*MsgApproveCdaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{3}
}
func (m *MsgApproveCdaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgApproveCdaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgApproveCdaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgApproveCdaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgApproveCdaResponse.Merge(m, src)
}
func (m *MsgApproveCdaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgApproveCdaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgApproveCdaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgApproveCdaResponse proto.InternalMessageInfo

type MsgFinalizeCda struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	CdaId   uint64 `protobuf:"varint,2,opt,name=cda_id,json=cdaId,proto3" json:"cda_id,omitempty"`
}

func (m *MsgFinalizeCda) Reset()         { *m = MsgFinalizeCda{} }
func (m *MsgFinalizeCda) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeCda) ProtoMessage()    {}
func (*MsgFinalizeCda) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{4}
}
func (m *MsgFinalizeCda) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeCda) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeCda.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeCda) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeCda.Merge(m, src)
}
func (m *MsgFinalizeCda) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeCda) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeCda.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeCda proto.InternalMessageInfo

func (m *MsgFinalizeCda) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFinalizeCda) GetCdaId() uint64 {
	if m != nil {
		return m.CdaId
	}
	return 0
}

type MsgFinalizeCdaResponse struct {
}

func (m *MsgFinalizeCdaResponse) Reset()         { *m = MsgFinalizeCdaResponse{} }
func (m *MsgFinalizeCdaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFinalizeCdaResponse) ProtoMessage()    {}
func (*MsgFinalizeCdaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{5}
}
func (m *MsgFinalizeCdaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFinalizeCdaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFinalizeCdaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFinalizeCdaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFinalizeCdaResponse.Merge(m, src)
}
func (m *MsgFinalizeCdaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFinalizeCdaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFinalizeCdaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFinalizeCdaResponse proto.InternalMessageInfo

type MsgRegisterContract struct {
	Creator           string         `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Description       string         `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	Authors           []string       `protobuf:"bytes,3,rep,name=authors,proto3" json:"authors,omitempty"`
	ContactInfo       *ContactInfo   `protobuf:"bytes,4,opt,name=contact_info,json=contactInfo,proto3" json:"contact_info,omitempty"`
	MoreInfoUri       string         `protobuf:"bytes,5,opt,name=more_info_uri,json=moreInfoUri,proto3" json:"more_info_uri,omitempty"`
	SigningDataSchema RawSigningData `protobuf:"bytes,6,opt,name=signing_data_schema,json=signingDataSchema,proto3,casttype=RawSigningData" json:"signing_data_schema,omitempty"`
	TemplateUri       string         `protobuf:"bytes,7,opt,name=template_uri,json=templateUri,proto3" json:"template_uri,omitempty"`
	TemplateSchemaUri string         `protobuf:"bytes,8,opt,name=template_schema_uri,json=templateSchemaUri,proto3" json:"template_schema_uri,omitempty"`
}

func (m *MsgRegisterContract) Reset()         { *m = MsgRegisterContract{} }
func (m *MsgRegisterContract) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterContract) ProtoMessage()    {}
func (*MsgRegisterContract) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{6}
}
func (m *MsgRegisterContract) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterContract) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterContract.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterContract) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterContract.Merge(m, src)
}
func (m *MsgRegisterContract) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterContract) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterContract.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterContract proto.InternalMessageInfo

func (m *MsgRegisterContract) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgRegisterContract) GetDescription() string {
	if m != nil {
		return m.Description
	}
	return ""
}

func (m *MsgRegisterContract) GetAuthors() []string {
	if m != nil {
		return m.Authors
	}
	return nil
}

func (m *MsgRegisterContract) GetContactInfo() *ContactInfo {
	if m != nil {
		return m.ContactInfo
	}
	return nil
}

func (m *MsgRegisterContract) GetMoreInfoUri() string {
	if m != nil {
		return m.MoreInfoUri
	}
	return ""
}

func (m *MsgRegisterContract) GetSigningDataSchema() RawSigningData {
	if m != nil {
		return m.SigningDataSchema
	}
	return nil
}

func (m *MsgRegisterContract) GetTemplateUri() string {
	if m != nil {
		return m.TemplateUri
	}
	return ""
}

func (m *MsgRegisterContract) GetTemplateSchemaUri() string {
	if m != nil {
		return m.TemplateSchemaUri
	}
	return ""
}

type MsgRegisterContractResponse struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgRegisterContractResponse) Reset()         { *m = MsgRegisterContractResponse{} }
func (m *MsgRegisterContractResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterContractResponse) ProtoMessage()    {}
func (*MsgRegisterContractResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_36833367b01cd9c2, []int{7}
}
func (m *MsgRegisterContractResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterContractResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterContractResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterContractResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterContractResponse.Merge(m, src)
}
func (m *MsgRegisterContractResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterContractResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterContractResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterContractResponse proto.InternalMessageInfo

func (m *MsgRegisterContractResponse) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*MsgCreateCda)(nil), "archive.cda.MsgCreateCda")
	proto.RegisterType((*MsgCreateCdaResponse)(nil), "archive.cda.MsgCreateCdaResponse")
	proto.RegisterType((*MsgApproveCda)(nil), "archive.cda.MsgApproveCda")
	proto.RegisterType((*MsgApproveCdaResponse)(nil), "archive.cda.MsgApproveCdaResponse")
	proto.RegisterType((*MsgFinalizeCda)(nil), "archive.cda.MsgFinalizeCda")
	proto.RegisterType((*MsgFinalizeCdaResponse)(nil), "archive.cda.MsgFinalizeCdaResponse")
	proto.RegisterType((*MsgRegisterContract)(nil), "archive.cda.MsgRegisterContract")
	proto.RegisterType((*MsgRegisterContractResponse)(nil), "archive.cda.MsgRegisterContractResponse")
}

func init() { proto.RegisterFile("archive/cda/tx.proto", fileDescriptor_36833367b01cd9c2) }

var fileDescriptor_36833367b01cd9c2 = []byte{
	// 746 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x55, 0xcd, 0x4e, 0xdb, 0x4a,
	0x14, 0x8e, 0x13, 0xfe, 0x32, 0x0e, 0x01, 0x06, 0x72, 0xaf, 0xaf, 0x91, 0x92, 0xe0, 0x2b, 0x5d,
	0xb2, 0xb8, 0x75, 0xa4, 0xa0, 0x3e, 0x00, 0x09, 0x54, 0x8d, 0x44, 0xd4, 0xca, 0x80, 0x2a, 0x75,
	0xd1, 0x68, 0x18, 0x0f, 0xce, 0x88, 0xd8, 0x63, 0xcd, 0x4c, 0x80, 0xf6, 0x29, 0x78, 0x98, 0x3e,
	0x41, 0x57, 0xec, 0xca, 0xb2, 0xab, 0xb4, 0x0a, 0x6f, 0xd1, 0x55, 0xe5, 0x71, 0x9c, 0x38, 0x29,
	0x3f, 0x52, 0x77, 0x3e, 0xdf, 0x39, 0xdf, 0x39, 0x67, 0xce, 0xf9, 0xc6, 0x03, 0xb6, 0x10, 0xc7,
	0x3d, 0x7a, 0x49, 0xea, 0xd8, 0x45, 0x75, 0x79, 0x6d, 0x87, 0x9c, 0x49, 0x06, 0xf5, 0x31, 0x6a,
	0x63, 0x17, 0x99, 0xa5, 0x74, 0x08, 0x76, 0x51, 0x1c, 0x63, 0x9a, 0x33, 0x30, 0x0b, 0x24, 0x47,
	0x58, 0x8e, 0x7d, 0x5b, 0x1e, 0xf3, 0x98, 0xfa, 0xac, 0x47, 0x5f, 0x63, 0xb4, 0xe2, 0x31, 0xe6,
	0xf5, 0x49, 0x5d, 0x59, 0x67, 0x83, 0xf3, 0xba, 0xa4, 0x3e, 0x11, 0x12, 0xf9, 0x61, 0x1c, 0x60,
	0x7d, 0xce, 0x82, 0x42, 0x47, 0x78, 0x2d, 0x4e, 0x90, 0x24, 0x2d, 0x17, 0x41, 0x03, 0x2c, 0xe3,
	0xc8, 0x60, 0xdc, 0xd0, 0xaa, 0x5a, 0x2d, 0xef, 0x24, 0x26, 0xdc, 0x05, 0x6b, 0x82, 0x7a, 0x01,
	0x0d, 0xbc, 0x6e, 0x88, 0xb8, 0xa4, 0x44, 0x18, 0xd9, 0x6a, 0xae, 0x96, 0x77, 0x8a, 0x63, 0xf8,
	0x6d, 0x8c, 0xc2, 0x0a, 0xd0, 0x93, 0xe6, 0xba, 0xd4, 0x35, 0x72, 0x55, 0xad, 0xb6, 0xe0, 0x80,
	0x04, 0x6a, 0xbb, 0xf0, 0x7f, 0x00, 0xfb, 0xc4, 0x43, 0xfd, 0xae, 0x4f, 0x24, 0x72, 0x91, 0x44,
	0xdd, 0x01, 0xa7, 0xc6, 0x82, 0x2a, 0xb7, 0xae, 0x3c, 0x9d, 0xb1, 0xe3, 0x94, 0x53, 0x78, 0x00,
	0x0a, 0x49, 0xdd, 0x08, 0x32, 0x16, 0xab, 0x5a, 0xad, 0xd0, 0xdc, 0x19, 0x0d, 0x2b, 0xfa, 0x71,
	0x8c, 0x1f, 0x20, 0x89, 0x7e, 0x0e, 0x2b, 0x45, 0x07, 0x5d, 0xa5, 0x10, 0x47, 0x17, 0x53, 0x03,
	0x1e, 0x81, 0xb5, 0x81, 0xc4, 0x5d, 0x72, 0x1d, 0x52, 0x4e, 0xba, 0xd1, 0x18, 0x8c, 0xa5, 0xaa,
	0x56, 0xd3, 0x1b, 0xa6, 0x1d, 0xcf, 0xc8, 0x4e, 0x66, 0x64, 0x9f, 0x24, 0x33, 0x6a, 0xae, 0xdc,
	0x0e, 0x2b, 0x99, 0x9b, 0xef, 0x15, 0xcd, 0x59, 0x1d, 0x48, 0x7c, 0xa8, 0xb8, 0x91, 0xd7, 0xfa,
	0x0f, 0x6c, 0xa5, 0xa7, 0xe6, 0x10, 0x11, 0xb2, 0x40, 0x10, 0x58, 0x04, 0x59, 0xea, 0xaa, 0xc1,
	0x2d, 0x38, 0x59, 0xea, 0x5a, 0x57, 0x60, 0xb5, 0x23, 0xbc, 0xfd, 0x30, 0xe4, 0xec, 0xf2, 0x99,
	0xf1, 0x96, 0xc0, 0x12, 0x76, 0x51, 0x34, 0xb0, 0xac, 0xa2, 0x2f, 0x62, 0x17, 0xb5, 0x5d, 0xf8,
	0x72, 0xee, 0xf4, 0x39, 0x75, 0x7a, 0xf8, 0xcc, 0x71, 0xad, 0xbf, 0x41, 0x69, 0xa6, 0x70, 0xd2,
	0xa1, 0xb5, 0x0f, 0x8a, 0x1d, 0xe1, 0xbd, 0xa2, 0x01, 0xea, 0xd3, 0x4f, 0x7f, 0xd4, 0x92, 0x65,
	0x80, 0xbf, 0x66, 0x53, 0x4c, 0x92, 0x7f, 0xc9, 0x81, 0xcd, 0x8e, 0xf0, 0x1c, 0xe2, 0x51, 0x21,
	0x09, 0x6f, 0x8d, 0x57, 0xfe, 0x44, 0x89, 0x2a, 0xd0, 0x5d, 0x22, 0x30, 0xa7, 0xa1, 0xa4, 0x2c,
	0x50, 0x75, 0xf2, 0x4e, 0x1a, 0x8a, 0xb8, 0x68, 0x20, 0x7b, 0x8c, 0x0b, 0x23, 0xa7, 0xe4, 0x96,
	0x98, 0xf0, 0x08, 0x14, 0x22, 0x51, 0x29, 0x99, 0x05, 0xe7, 0x4c, 0x09, 0x48, 0x6f, 0x18, 0x76,
	0xea, 0x26, 0xd9, 0xad, 0x38, 0xa0, 0x1d, 0x9c, 0xb3, 0xe6, 0x5a, 0x24, 0x99, 0x14, 0xe0, 0xe8,
	0x78, 0x6a, 0xc0, 0x3d, 0xb0, 0xea, 0x33, 0x4e, 0x54, 0x2a, 0xa5, 0xc7, 0x48, 0x67, 0xf9, 0x98,
	0xd4, 0x61, 0x9c, 0x44, 0x41, 0xa7, 0x9c, 0x3a, 0xba, 0x3f, 0x35, 0xe0, 0x3b, 0xb0, 0x99, 0xde,
	0x4e, 0x57, 0xe0, 0x1e, 0xf1, 0x91, 0x52, 0x56, 0xa1, 0xb9, 0x3b, 0x1a, 0x56, 0x36, 0x52, 0x1b,
	0x3a, 0x56, 0xce, 0x07, 0x36, 0xb7, 0x21, 0xe6, 0x83, 0x60, 0x03, 0x14, 0x24, 0xf1, 0xc3, 0x3e,
	0x92, 0x44, 0x35, 0xb3, 0x3c, 0x6d, 0xe6, 0x64, 0x8c, 0xab, 0x66, 0xe4, 0xd4, 0x80, 0x87, 0x60,
	0x73, 0xc2, 0x89, 0x1b, 0x51, 0xd4, 0x15, 0x45, 0x2d, 0x45, 0xcd, 0x24, 0xd4, 0xb8, 0x48, 0x94,
	0x60, 0x43, 0xce, 0x43, 0xd6, 0x0b, 0xb0, 0xfd, 0xc0, 0x0e, 0x1f, 0x93, 0x78, 0xe3, 0x6b, 0x16,
	0xe4, 0x3a, 0xc2, 0x83, 0x6d, 0x90, 0x9f, 0xfe, 0x45, 0xfe, 0x99, 0x59, 0x42, 0xfa, 0xaa, 0x98,
	0x3b, 0x8f, 0xba, 0x26, 0x25, 0x8e, 0x00, 0x48, 0x5d, 0x19, 0x73, 0x9e, 0x30, 0xf5, 0x99, 0xd6,
	0xe3, 0xbe, 0x49, 0xb6, 0x37, 0x40, 0x4f, 0xcb, 0x7d, 0x7b, 0x9e, 0x92, 0x72, 0x9a, 0xff, 0x3e,
	0xe1, 0x9c, 0x24, 0xfc, 0x00, 0xd6, 0x7f, 0x53, 0x78, 0x75, 0x9e, 0x38, 0x1f, 0x61, 0xd6, 0x9e,
	0x8b, 0x48, 0xf2, 0x37, 0x9b, 0xb7, 0xa3, 0xb2, 0x76, 0x37, 0x2a, 0x6b, 0x3f, 0x46, 0x65, 0xed,
	0xe6, 0xbe, 0x9c, 0xb9, 0xbb, 0x2f, 0x67, 0xbe, 0xdd, 0x97, 0x33, 0xef, 0x6b, 0x1e, 0x95, 0xbd,
	0xc1, 0x99, 0x8d, 0x99, 0x5f, 0x7f, 0x8d, 0x82, 0x8b, 0x26, 0x27, 0xf8, 0xa2, 0x9e, 0xbc, 0x0a,
	0xd7, 0xf1, 0x8b, 0xf2, 0x31, 0x24, 0xe2, 0x6c, 0x49, 0xfd, 0xcd, 0xf6, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0xec, 0xfc, 0x5f, 0x3e, 0x6d, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	CreateCda(ctx context.Context, in *MsgCreateCda, opts ...grpc.CallOption) (*MsgCreateCdaResponse, error)
	ApproveCda(ctx context.Context, in *MsgApproveCda, opts ...grpc.CallOption) (*MsgApproveCdaResponse, error)
	FinalizeCda(ctx context.Context, in *MsgFinalizeCda, opts ...grpc.CallOption) (*MsgFinalizeCdaResponse, error)
	RegisterContract(ctx context.Context, in *MsgRegisterContract, opts ...grpc.CallOption) (*MsgRegisterContractResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CreateCda(ctx context.Context, in *MsgCreateCda, opts ...grpc.CallOption) (*MsgCreateCdaResponse, error) {
	out := new(MsgCreateCdaResponse)
	err := c.cc.Invoke(ctx, "/archive.cda.Msg/CreateCda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) ApproveCda(ctx context.Context, in *MsgApproveCda, opts ...grpc.CallOption) (*MsgApproveCdaResponse, error) {
	out := new(MsgApproveCdaResponse)
	err := c.cc.Invoke(ctx, "/archive.cda.Msg/ApproveCda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FinalizeCda(ctx context.Context, in *MsgFinalizeCda, opts ...grpc.CallOption) (*MsgFinalizeCdaResponse, error) {
	out := new(MsgFinalizeCdaResponse)
	err := c.cc.Invoke(ctx, "/archive.cda.Msg/FinalizeCda", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterContract(ctx context.Context, in *MsgRegisterContract, opts ...grpc.CallOption) (*MsgRegisterContractResponse, error) {
	out := new(MsgRegisterContractResponse)
	err := c.cc.Invoke(ctx, "/archive.cda.Msg/RegisterContract", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	CreateCda(context.Context, *MsgCreateCda) (*MsgCreateCdaResponse, error)
	ApproveCda(context.Context, *MsgApproveCda) (*MsgApproveCdaResponse, error)
	FinalizeCda(context.Context, *MsgFinalizeCda) (*MsgFinalizeCdaResponse, error)
	RegisterContract(context.Context, *MsgRegisterContract) (*MsgRegisterContractResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CreateCda(ctx context.Context, req *MsgCreateCda) (*MsgCreateCdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCda not implemented")
}
func (*UnimplementedMsgServer) ApproveCda(ctx context.Context, req *MsgApproveCda) (*MsgApproveCdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ApproveCda not implemented")
}
func (*UnimplementedMsgServer) FinalizeCda(ctx context.Context, req *MsgFinalizeCda) (*MsgFinalizeCdaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinalizeCda not implemented")
}
func (*UnimplementedMsgServer) RegisterContract(ctx context.Context, req *MsgRegisterContract) (*MsgRegisterContractResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterContract not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CreateCda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCreateCda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CreateCda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.cda.Msg/CreateCda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CreateCda(ctx, req.(*MsgCreateCda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_ApproveCda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgApproveCda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).ApproveCda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.cda.Msg/ApproveCda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).ApproveCda(ctx, req.(*MsgApproveCda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FinalizeCda_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFinalizeCda)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FinalizeCda(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.cda.Msg/FinalizeCda",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FinalizeCda(ctx, req.(*MsgFinalizeCda))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterContract_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterContract)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterContract(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/archive.cda.Msg/RegisterContract",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterContract(ctx, req.(*MsgRegisterContract))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "archive.cda.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCda",
			Handler:    _Msg_CreateCda_Handler,
		},
		{
			MethodName: "ApproveCda",
			Handler:    _Msg_ApproveCda_Handler,
		},
		{
			MethodName: "FinalizeCda",
			Handler:    _Msg_FinalizeCda_Handler,
		},
		{
			MethodName: "RegisterContract",
			Handler:    _Msg_RegisterContract_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "archive/cda/tx.proto",
}

func (m *MsgCreateCda) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCda) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCda) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_gogo_protobuf_types.StdTimeMarshalTo(m.UtcExpireTime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdTime(m.UtcExpireTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintTx(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x32
	if len(m.SigningData) > 0 {
		i -= len(m.SigningData)
		copy(dAtA[i:], m.SigningData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SigningData)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.LegalMetadataUri) > 0 {
		i -= len(m.LegalMetadataUri)
		copy(dAtA[i:], m.LegalMetadataUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.LegalMetadataUri)))
		i--
		dAtA[i] = 0x22
	}
	if m.ContractId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.ContractId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.SigningParties) > 0 {
		for iNdEx := len(m.SigningParties) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SigningParties[iNdEx])
			copy(dAtA[i:], m.SigningParties[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.SigningParties[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCreateCdaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCreateCdaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCreateCdaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveCda) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCda) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCda) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SigningData) > 0 {
		i -= len(m.SigningData)
		copy(dAtA[i:], m.SigningData)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SigningData)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CdaId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CdaId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgApproveCdaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgApproveCdaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgApproveCdaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeCda) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeCda) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeCda) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CdaId != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.CdaId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFinalizeCdaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFinalizeCdaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFinalizeCdaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterContract) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterContract) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterContract) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TemplateSchemaUri) > 0 {
		i -= len(m.TemplateSchemaUri)
		copy(dAtA[i:], m.TemplateSchemaUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TemplateSchemaUri)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.TemplateUri) > 0 {
		i -= len(m.TemplateUri)
		copy(dAtA[i:], m.TemplateUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TemplateUri)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.SigningDataSchema) > 0 {
		i -= len(m.SigningDataSchema)
		copy(dAtA[i:], m.SigningDataSchema)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SigningDataSchema)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.MoreInfoUri) > 0 {
		i -= len(m.MoreInfoUri)
		copy(dAtA[i:], m.MoreInfoUri)
		i = encodeVarintTx(dAtA, i, uint64(len(m.MoreInfoUri)))
		i--
		dAtA[i] = 0x2a
	}
	if m.ContactInfo != nil {
		{
			size, err := m.ContactInfo.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Authors) > 0 {
		for iNdEx := len(m.Authors) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Authors[iNdEx])
			copy(dAtA[i:], m.Authors[iNdEx])
			i = encodeVarintTx(dAtA, i, uint64(len(m.Authors[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Description) > 0 {
		i -= len(m.Description)
		copy(dAtA[i:], m.Description)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Description)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterContractResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterContractResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterContractResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCreateCda) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.SigningParties) > 0 {
		for _, s := range m.SigningParties {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ContractId != 0 {
		n += 1 + sovTx(uint64(m.ContractId))
	}
	l = len(m.LegalMetadataUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SigningData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = github_com_gogo_protobuf_types.SizeOfStdTime(m.UtcExpireTime)
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCreateCdaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func (m *MsgApproveCda) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CdaId != 0 {
		n += 1 + sovTx(uint64(m.CdaId))
	}
	l = len(m.SigningData)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgApproveCdaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFinalizeCda) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CdaId != 0 {
		n += 1 + sovTx(uint64(m.CdaId))
	}
	return n
}

func (m *MsgFinalizeCdaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterContract) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.Authors) > 0 {
		for _, s := range m.Authors {
			l = len(s)
			n += 1 + l + sovTx(uint64(l))
		}
	}
	if m.ContactInfo != nil {
		l = m.ContactInfo.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.MoreInfoUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SigningDataSchema)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TemplateUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TemplateSchemaUri)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterContractResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovTx(uint64(m.Id))
	}
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCreateCda) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCda: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCda: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningParties", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningParties = append(m.SigningParties, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContractId", wireType)
			}
			m.ContractId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ContractId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LegalMetadataUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LegalMetadataUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningData = append(m.SigningData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningData == nil {
				m.SigningData = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UtcExpireTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_gogo_protobuf_types.StdTimeUnmarshal(&m.UtcExpireTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCreateCdaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCreateCdaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCreateCdaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCda) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCda: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCda: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdaId", wireType)
			}
			m.CdaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningData", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningData = append(m.SigningData[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningData == nil {
				m.SigningData = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgApproveCdaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgApproveCdaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgApproveCdaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeCda) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeCda: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeCda: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CdaId", wireType)
			}
			m.CdaId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CdaId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFinalizeCdaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFinalizeCdaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFinalizeCdaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterContract) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterContract: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterContract: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authors", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authors = append(m.Authors, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ContactInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ContactInfo == nil {
				m.ContactInfo = &ContactInfo{}
			}
			if err := m.ContactInfo.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MoreInfoUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MoreInfoUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigningDataSchema", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigningDataSchema = append(m.SigningDataSchema[:0], dAtA[iNdEx:postIndex]...)
			if m.SigningDataSchema == nil {
				m.SigningDataSchema = []byte{}
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TemplateSchemaUri", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TemplateSchemaUri = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterContractResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterContractResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterContractResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
