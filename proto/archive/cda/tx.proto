syntax = "proto3";
package archive.cda;

import "archive/cda/cda.proto";
import "archive/cda/contract.proto";
import "gogoproto/gogo.proto";
import "google/protobuf/timestamp.proto";

option go_package = "github.com/HankBreck/archive/x/cda/types";

// Msg defines the Msg service.
service Msg {
  rpc CreateCda(MsgCreateCda) returns (MsgCreateCdaResponse);
  rpc ApproveCda(MsgApproveCda) returns (MsgApproveCdaResponse);
  rpc WitnessApproveCda(MsgWitnessApproveCda)
      returns (MsgWitnessApproveCdaResponse);
  rpc FinalizeCda(MsgFinalizeCda) returns (MsgFinalizeCdaResponse);
  rpc VoidCda(MsgVoidCda) returns (MsgVoidCdaResponse);
  rpc RegisterContract(MsgRegisterContract)
      returns (MsgRegisterContractResponse);
}

message MsgCreateCda {
  // the account that sent the message
  string creator = 1;
  // the list of identity IDs that must sign the CDA
  repeated uint64 signer_ids = 2;
  // the id of the registered contract template
  uint64 contract_id = 3;
  // the URI pointing to the contract's metadata
  string legal_metadata_uri = 4;
  // the json encoded on-chain data that should be used
  bytes signing_data = 5 [ (gogoproto.casttype) = "RawSigningData" ];
  // the expiration UTC timestamp of this agreement
  google.protobuf.Timestamp utc_expire_time = 6
      [ (gogoproto.stdtime) = true, (gogoproto.nullable) = false ];
  // the json encoded message to be passed to the witness contract on
  // instantiation
  bytes witness_init_msg = 7 [ (gogoproto.casttype) = "RawSigningData" ];
}
message MsgCreateCdaResponse {
  // the ID of the new CDA
  uint64 id = 1;
  // the address of the witness contract
  string witness_address = 2;
  // the response from the witness contract
  bytes witness_init_response = 3;
}

message MsgApproveCda {
  // the account that sent the message
  string creator = 1;
  // the ID of the CDA to approve
  uint64 cda_id = 2;
  // the identity ID to sign on behalf of
  uint64 signer_id = 3;
  // the on-chain data specified in MsgCreateCda
  bytes signing_data = 4 [ (gogoproto.casttype) = "RawSigningData" ];
}
message MsgApproveCdaResponse {}

message MsgWitnessApproveCda {
  // the account that sent the message
  string creator = 1;
  // the ID of the CDA to approve
  uint64 cda_id = 2;
  // the on-chain data specified in MsgCreateCda
  bytes signing_data = 4 [ (gogoproto.casttype) = "RawSigningData" ];
}
message MsgWitnessApproveCdaResponse {}

message MsgFinalizeCda {
  // the account that sent the message
  string creator = 1;
  // the ID of the CDA to finalize
  uint64 cda_id = 2;
}
message MsgFinalizeCdaResponse {}

message MsgVoidCda {
    // the account that sent the message
    string creator = 1;
    // the ID of the CDA to void
    uint64 cda_id = 2;
}
message MsgVoidCdaResponse {}

message MsgRegisterContract {
  // the account that sent the message
  string creator = 1;
  // the description of the contract
  string description = 2;
  // the list of contract authors
  repeated string authors = 3;
  // information on how to contract the authors
  ContactInfo contact_info = 4;
  // a URI pointing to extra information about the ocntract
  string more_info_uri = 5;
  // the JSON schema that specifies the required on-chain data
  bytes signing_data_schema = 6 [ (gogoproto.casttype) = "RawSigningData" ];
  // a URI pointing to the template legal contract
  string template_uri = 7;
  // a URI pointing to the template legal contract's schema
  string template_schema_uri = 8;
  // the ID of the wasm code to be used as the contract's witness
  uint64 witness_code_id = 9;
}
message MsgRegisterContractResponse { uint64 id = 1; }
