syntax = "proto3";
package archive.cda;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "archive/cda/params.proto";
import "archive/cda/cda.proto";
import "archive/cda/contract.proto";

option go_package = "github.com/HankBreck/archive/x/cda/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/archive/cda/params";
  }
  // Queries a list of Cda items.
  rpc Cda(QueryCdaRequest) returns (QueryCdaResponse) {
    option (google.api.http).get = "/archive/cda/cda/{id}";
  }

  // Queries a list of Cdas items.
  rpc Cdas(QueryCdasRequest) returns (QueryCdasResponse) {
    option (google.api.http).get = "/archive/cda/cdas";
  }

  // Queries a list of CdasOwned items.
  rpc CdasOwned(QueryCdasOwnedRequest) returns (QueryCdasOwnedResponse) {
    option (google.api.http).get = "/archive/cda/cdas_owned/{owner}";
  }

  // Queries a list of Approvals items.
  rpc Approval(QueryApprovalRequest) returns (QueryApprovalResponse) {
    option (google.api.http).get = "/archive/cda/approval/{cdaId}";
  }

  rpc Contract(QueryContractRequest) returns (QueryContractResponse) {
    option (google.api.http).get = "/archive/contractregistry/contract";
  }

  rpc Contracts(QueryContractsRequest) returns (QueryContractsResponse) {
    option (google.api.http).get = "/archive/contractregistry/contracts";
  }

  rpc SigningDataSchema(QuerySigningDataSchemaRequest) returns (QuerySigningDataSchemaResponse) {
    option (google.api.http).get = "/archive/contractregistry/signingdata";
  }
  // this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}
// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [ (gogoproto.nullable) = false ];
}

message QueryCdaRequest { uint64 id = 1; }
message QueryCdaResponse { CDA cda = 1; }

message QueryCdasRequest {
  // Pagination to view all CDAs
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
message QueryCdasResponse {
  // List of CDA objects
  repeated CDA CDAs = 1;

  // Pagination to view all CDAs
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryCdasOwnedRequest {
  // Account address for the owner
  string owner = 1;

  // Pagination to view all ids
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}
message QueryCdasOwnedResponse {
  // List of CDA ids belonging to the owner
  repeated uint64 ids = 1;

  // Pagination to view all CDAs
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

message QueryApprovalRequest {
  // The id of the CDA to check
  uint64 cdaId = 1;

  // The wallet address of the owner to check
  string owner = 2;
}
message QueryApprovalResponse { bool approved = 1; }

// QueryContractRequest is the request type for the Query/Contract RPC method.
message QueryContractRequest { uint64 id = 1; }
// QueryContractResponse is the response type for the Query/Contracts RPC
// method.
message QueryContractResponse {
  Contract contract = 1 [ (gogoproto.nullable) = false ];
}

// QueryContractsRequest is the request type for the Query/Contracts RPC method.
message QueryContractsRequest {
  // pagination defines an optional pagination for the request.
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}
// QueryContractsResponse is the response type for the Query/Contracts RPC
// method.
message QueryContractsResponse {
  // the ids of the contracts registered
  repeated Contract contracts = 1 [ (gogoproto.nullable) = false ];

  // pagination defines the pagination in the response.
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QuerySigningDataSchemaRequest is the request type for the Query/SigningData RPC
// method
message QuerySigningDataSchemaRequest { uint64 id = 1; }
// QuerySigningDataResponse is the reseponse type for the Query/SigningData RPC
// method
message QuerySigningDataSchemaResponse {
  bytes schema = 1 [ (gogoproto.casttype) = "RawSigningData" ];
}
